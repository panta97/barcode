{"version":3,"sources":["barcode.js","App.js","serviceWorker.js","index.js"],"names":["Barcode","props","code","price","formatedCode","children","className","Number","toFixed","Math","round","desc","size","mCode","value","level","renderAs","App","barcodes","useState","labels","setLabels","length","quantity","setQuantity","onFileLoaded","data","_","i","element","elementDetails","push","prevQuantity","prevLabels","getData","id","onClick","window","print","map","label","index","key","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"69NAuDeA,MAnDf,SAAiBC,GAGf,IASiBC,EATCC,EAkBZC,EARgB,qBADLF,EASYD,EAAMI,SAASH,MAPjCA,EAGA,UAMX,OACI,yBAAKI,UAAU,SACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,SAAf,OAtBe,qBADLH,EAuB2BF,EAAMI,SAASF,OArBjDI,OAAOJ,GAAOK,QAAQ,GAGtB,IAmBH,yBAAKF,UAAU,UAAf,KAA2BG,KAAKC,MAAMT,EAAMI,SAASF,MAAQ,KAA7D,YAEF,yBAAKG,UAAU,eACb,yBAAKA,UAAU,QAAQL,EAAMI,SAASM,MACtC,yBAAKL,UAAU,QAAf,OAA2BL,EAAMI,SAASO,OAE5C,yBAAKN,UAAU,gBACb,yBAAKA,UAAU,UAAUL,EAAMI,SAASQ,OACxC,yBAAKP,UAAU,QAAQF,GACvB,yBAAKE,UAAU,WACb,yBAAKA,UAAU,MACb,kBAAC,IAAD,CACEQ,MAAOV,EACPQ,KAAM,IACNG,MAAO,IACPC,SAAU,aCcXC,MAtDf,WACE,IAAIC,EAAW,GADF,EAQeC,mBAASD,GARxB,mBAQNE,EARM,KAQEC,EARF,OASmBF,mBAASD,EAASI,QATrC,mBASNC,EATM,KASIC,EATJ,KAiCb,OACE,6BACE,kBAAC,IAAD,CAAWC,aAAc,SAACC,EAAMC,GAAP,OAxBb,SAACD,GAGf,IAFA,IAAIR,EAAW,GAENU,EAAI,EAAGA,EAAIF,EAAKJ,OAAQM,IAAK,CACpC,IAAMC,EAAUH,EAAKE,GAEjBE,EAAiB,CACnB3B,MAAQ0B,EAAQ,GAChBlB,KAAOkB,EAAQ,GACfjB,KAAOiB,EAAQ,GACfhB,MAAQgB,EAAQ,GAChB3B,KAAO2B,EAAQ,IAEjBX,EAASa,KAAKD,GAIhBN,GAAY,SAAAQ,GAAY,OAAIN,EAAKJ,OAAS,KAC1CD,GAAU,SAAAY,GAAU,OAAIf,KAMgBgB,CAAQR,MAE9C,yBAAKS,GAAG,YACR,4BAAQC,QAAS,kBAAMC,OAAOC,UAA9B,UAGA,0CAAgBf,GAEhB,yBAAKY,GAAG,oBAENf,EAAOmB,KAAI,SAACC,EAAOC,GAAR,OACT,kBAAC,EAAD,CAASC,IAAKD,GAAQD,SCxCZG,QACW,cAA7BN,OAAOO,SAASC,UAEe,UAA7BR,OAAOO,SAASC,UAEhBR,OAAOO,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.eafef493.chunk.js","sourcesContent":["import React from \"react\";\nimport QRCode from \"qrcode.react\";\nimport \"./barcode.css\";\n\nfunction Barcode(props) {\n\n\n  const getPrice = (price) => {\n    if (typeof price !== 'undefined') {\n      return Number(price).toFixed(2);\n    }\n    else {\n      return '';\n    }\n  };\n\n  const getCode = (code) => {\n    if (typeof code !== 'undefined') {\n      return code;\n    }\n    else {\n      return 'no code';\n    }\n  };\n\n  const formatedCode = getCode(props.children.code);\n\n  return (\n      <div className=\"label\">\n        <div className=\"top\">\n          <div className=\"price\">S/. {getPrice(props.children.price)}</div>\n          <div className=\"points\">o {Math.round(props.children.price / 0.04)} Puntos</div>\n        </div>\n        <div className=\"left-bottom\">\n          <div className=\"desc\">{props.children.desc}</div>\n          <div className=\"size\">T/. {props.children.size}</div>\n        </div>\n        <div className=\"right-bottom\">\n          <div className=\"m-code\">{props.children.mCode}</div>\n          <div className=\"code\">{formatedCode}</div>\n          <div className=\"qr-code\">\n            <div className=\"qr\">\n              <QRCode\n                value={formatedCode}\n                size={120}\n                level={\"H\"}\n                renderAs={\"svg\"}\n              ></QRCode>\n            </div>\n          </div>\n        </div>\n      </div>\n  );\n}\n\nexport default Barcode;\n","import React, { useState } from 'react';\nimport './App.css';\nimport CSVReader from 'react-csv-reader'\nimport Barcode from './barcode'\n\n\nfunction App() {\n  let barcodes = [];\n  const debug = false;\n\n  if (debug) {\n    barcodes = require('./tickets.json')\n  }\n\n  const [labels, setLabels] = useState(barcodes);\n  const [quantity, setQuantity] = useState(barcodes.length);\n\n  const getData = (data) => {\n    var barcodes = []\n\n    for (let i = 1; i < data.length; i++) {\n      const element = data[i];\n\n      var elementDetails = {\n        price : element[0],\n        desc : element[1],\n        size : element[2],\n        mCode : element[3],\n        code : element[4]\n      }\n      barcodes.push(elementDetails);\n\n    }\n\n    setQuantity(prevQuantity => data.length - 1);\n    setLabels(prevLabels => barcodes);\n\n  };\n\n  return (\n    <div>\n      <CSVReader onFileLoaded={(data, _) => getData(data)} />\n\n      <div id=\"no-print\">\n      <button onClick={() => window.print()}>PRINT</button>\n      </div>\n\n      <h1>Etiquetas: {quantity}</h1>\n\n      <div id=\"section-to-print\">\n        {\n        labels.map((label, index) => (\n          <Barcode key={index}>{label}</Barcode>\n        ))}\n      </div>\n    </div>\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}