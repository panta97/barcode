{"version":3,"sources":["microQR.js","barcode.js","App.js","serviceWorker.js","index.js"],"names":["Component","Barcode","label","code","desc","mCode","cats","price","attr","type","id","className","value","size","level","renderAs","App","barcodes","useState","inputKey","setInputKey","labels","setLabels","length","quantity","setQuantity","filename","setFilename","getData","data","fileInfo","lblType","csvType","Label","this","currencyFormat","attrPristine","Number","split","trim","toUpperCase","toFixed","i","row","slice","join","addAttr","push","getLabel","labelsQ","prevQuantity","prevLabels","randomString","Math","random","toString","prevInputKey","prevFilename","name","key","inputId","onFileLoaded","onClick","window","print","map","index","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.7514b83a.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport bwipjs from \"bwip-js\";\n\nclass MicroQR extends Component {\n  componentDidMount() {\n    try {\n      // The return value is the canvas element\n\n      var barcodeProps = {\n        bcid: this.props.codeType, // Barcode type\n        text: this.props.value, // Text to encode\n        scale: this.props.scale, // 3x scaling factor\n        includetext: false, // Show human-readable text\n        textxalign: \"center\", // Always good to set this\n      };\n\n      let canvas = bwipjs.toCanvas(`${this.props.id}-canvas`, barcodeProps);\n      // console.log(canvas);\n    } catch (e) {\n      // `e` may be a string or Error object\n    }\n  }\n\n  render() {\n    let canvasStyle = {\n      width: '100%',\n      height: '100%'\n    };\n    let canvasId =`${this.props.id}-canvas`;\n    return <canvas id={canvasId} style={canvasStyle}></canvas>;\n  }\n}\n\nexport default MicroQR;\n","import React from \"react\";\nimport QRCode from \"qrcode.react\";\nimport MicroQR from \"./microQR\";\nimport \"./barcode.css\";\n\nfunction Barcode({label: {code, desc, mCode, cats, price, attr, type}, id}) {\n\n  if (type === '1') {\n    return (\n      <div className=\"type-1\">\n  <div className=\"container\">\n\n    <div className=\"top\">\n          <h2 className=\"price\">{price}</h2>\n    <p className=\"cat\">{cats}</p>\n\n    </div>\n    <div className=\"middle\">\n      <div className=\"d-attr\">\n        <p className=\"attr\">{attr}</p>\n      </div>\n          <div className=\"barcode\">\n          <QRCode\n                value={code}\n                size={100}\n                level={\"H\"}\n                renderAs={\"svg\"}\n              ></QRCode>\n          </div>\n          <div className=\"d-fa-code\">\n          <p className=\"fa-code\">{mCode}</p>\n          </div>\n    </div>\n\n    <div className=\"bottom\">\n          <p className=\"code\">{code}</p>\n    <p className=\"desc\">{desc}</p>\n    </div>\n\n  </div>\n</div>\n    );\n  }\n}\n\nexport default Barcode;\n","import React, { useState } from 'react';\nimport './App.css';\nimport CSVReader from 'react-csv-reader';\nimport Barcode from './barcode';\n\n\nfunction App() {\n  let barcodes = [];\n\n  // Debugging code\n  const debug = false;\n\n  const getDataDebug = (data) => {\n    for (let i = 0; i < data.length; i++) {\n      for (let j = 0; j < data[i]['total']; j++) {\n        var elementDetails = {\n          price : data[i]['price'],\n          desc : data[i]['desc'],\n          size : data[i]['size'],\n          mCode : data[i]['mCode'],\n          code : data[i]['code'],\n          type : data[i]['type']\n        }\n        barcodes.push(elementDetails);\n      }\n    }\n  };\n\n  if (debug) {\n    let data = require('./tickets.json');\n    getDataDebug(data);\n  }\n  // end\n\n  const [inputKey, setInputKey] = useState('22');\n\n  const [labels, setLabels] = useState(barcodes);\n  const [quantity, setQuantity] = useState(barcodes.length);\n\n  const [filename, setFilename] = useState('');\n\n\n  const getLabel = (data, csvType) => {\n    let labels = [];\n\n    class Label {\n\n      attrPristine(attr) {\n        // Some attr are undefined, specially the ones from the migration\n        if (!attr) return '';\n        // Color: Negro => Negro\n        return attr.split(':')[1].trim().toUpperCase();\n      }\n\n      currencyFormat(price) {\n        return `S/ ${Number(price).toFixed(2)}`;\n      }\n\n      constructor(quantity, code, desc, mCode, cats, price, attr){\n        this.code = code;\n        this.desc = desc;\n        this.mCode = mCode;\n        this.cats = cats;\n        this.price = this.currencyFormat(price);\n        this.attr = this.attrPristine(attr);\n        this.type = '1';\n\n        // Helper property after setting quantities\n        // this property will be 0\n        this.quantity = Number(quantity);\n      }\n\n      addAttr(attr) {\n        this.attr += ` - ${this.attrPristine(attr)}`;\n      }\n    }\n\n\n    if (csvType === 'INGRESAR') {\n      // i starts at 1 to skip the headers\n      // TEMP data.length - 1 because last row length is 1\n      for(let i=1; i<data.length-1; i++) {\n        const row = data[i];\n        /*\n        row[2] => QUANTITY\n        row[3] => CODE\n        row[4] => DESCRIPCION\n        row[5] => MANUFACTURE CODE\n        row[6] => CATEGORIES\n        row[7] => PRICE\n        row[8] => ATTRIBUTE\n        */\n      if(row.slice(0,8).join('') === '') {\n        // Get last pushed item\n        labels[labels.length-1].addAttr(row[8]);\n        } else {\n          labels.push(new Label(row[2], row[3], row[4], row[5], row[6], row[7], row[8]));\n        }\n      }\n    } else if (csvType === 'REPO-CON-ATTR') {\n      // i starts at 1 to skip the headers\n      // TEMP data.length - 1 because last row length is 1\n      for(let i=1; i<data.length-1; i++) {\n        const row = data[i];\n        /*\n        1 => QUANTITY\n        row[1] => CODE\n        row[2] => DESCRIPCION\n        row[3] => MANUFACTURE CODE\n        row[4] => CATEGORIES\n        row[5] => PRICE\n        row[6] => ATTRIBUTE\n        */\n      if(row.slice(0,6).join('') === '') {\n        // Get last pushed item\n        labels[labels.length-1].addAttr(row[6]);\n        } else {\n          labels.push(new Label(1, row[1], row[2], row[3], row[4], row[5], row[6]));\n        }\n      }\n    } else if (csvType === 'REPO-SIN-ATTR') {\n      // i starts at 1 to skip the headers\n      // TEMP data.length - 1 because last row length is 1\n      for(let i=1; i<data.length-1; i++) {\n        const row = data[i];\n        /*\n        1 => QUANTITY\n        row[1] => CODE\n        row[2] => DESCRIPCION\n        row[3] => MANUFACTURE CODE\n        row[4] => CATEGORIES\n        row[5] => PRICE\n        */\n      labels.push(new Label(1, row[1], row[2], row[3], row[4], row[5], ''));\n      }\n    }\n\n    return labels;\n  }\n\n  const getData = (data, fileInfo) => {\n\n    let lblType = ''\n    if (data[0].length === 9)\n      lblType = 'INGRESAR'\n    else if (data[0].length === 7)\n      lblType = 'REPO-CON-ATTR'\n    else if (data[0].length === 6)\n      lblType = 'REPO-SIN-ATTR'\n\n    let labels = getLabel(data, lblType)\n\n    // set quantities\n    let labelsQ = [];\n    for(let i = 0; i< labels.length; i++) {\n      let label = labels[i];\n      while(label.quantity > 0) {\n        labelsQ.push(label);\n        label.quantity -= 1;\n      }\n    }\n\n    setQuantity(prevQuantity => labelsQ.length);\n    setLabels(prevLabels => labelsQ);\n\n    const randomString = Math.random().toString(36);\n    setInputKey(prevInputKey => randomString);\n\n    setFilename(prevFilename => fileInfo.name);\n\n  };\n\n  return (\n    <div>\n      <div key={inputKey} className=\"file-container\">\n        <CSVReader inputId=\"file-upload\" onFileLoaded={(data, fileInfo) => getData(data, fileInfo)} />\n        <div className=\"mask\">\n        {filename}\n        </div>\n      </div>\n\n      <div id=\"no-print\">\n      <button onClick={() => window.print()}>PRINT</button>\n      </div>\n\n      <h1>Etiquetas: {quantity}</h1>\n\n      <div id=\"section-to-print\">\n        {\n        labels.map((label, index) => (\n          <Barcode key={index} label={label} id={index}></Barcode>\n        ))}\n      </div>\n    </div>\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}