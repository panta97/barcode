{"version":3,"sources":["logo.svg","barcode.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Barcode","props","id","class","children","price","desc","size","mCode","code","value","App","useState","labels","setLabels","onFileLoaded","data","_","barcodes","i","length","element","elementDetails","push","prevLabels","getData","map","label","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+IAAAA,EAAOC,QAAU,IAA0B,kC,yLCsC5BC,MAhCf,SAAiBC,GACf,OACE,6BAEE,yBAAKC,GAAG,SACN,yBAAKA,GAAG,OACJ,uBAAGC,MAAM,sBAAT,OAAmCF,EAAMG,SAASC,MAAlD,OACA,uBAAGF,MAAM,uBAAT,KAAkCF,EAAMG,SAASC,MAAQ,IAAzD,YAEJ,yBAAKH,GAAG,UACJ,yBAAKA,GAAG,eACJ,6BACI,uBAAGC,MAAM,qBAAqBF,EAAMG,SAASE,OAEjD,yBAAKJ,GAAG,oBACJ,uBAAGC,MAAM,gBAAT,OAA6BF,EAAMG,SAASG,QAGpD,yBAAKL,GAAG,gBACJ,uBAAGC,MAAM,sBAAsBF,EAAMG,SAASI,OAC9C,uBAAGL,MAAM,qBAAqBF,EAAMG,SAASK,MAC7C,yBAAKP,GAAG,WACN,kBAAC,IAAD,CAAQQ,MAAOT,EAAMG,SAASK,KAAMF,KAAM,YCkB7CI,MArCf,WAAgB,IAAD,EAGeC,mBAAS,IAHxB,mBAGNC,EAHM,KAGEC,EAHF,KA0Bb,OACE,6BACE,kBAAC,IAAD,CAAWC,aAAc,SAACC,EAAMC,GAAP,OAvBb,SAACD,GAGf,IAFA,IAAIE,EAAW,GAENC,EAAI,EAAGA,EAAIH,EAAKI,OAAQD,IAAK,CACpC,IAAME,EAAUL,EAAKG,GAEjBG,EAAiB,CACnBjB,MAAQgB,EAAQ,GAChBf,KAAOe,EAAQ,GACfd,KAAOc,EAAQ,GACfb,MAAQa,EAAQ,GAChBZ,KAAOY,EAAQ,IAEjBH,EAASK,KAAKD,GAIhBR,GAAU,SAAAU,GAAU,OAAIN,KAMgBO,CAAQT,MAC7CH,EAAOa,KAAI,SAAAC,GAAK,OACf,kBAAC,EAAD,KAAUA,QC3BEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.dc977fff.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\nimport QRCode from 'qrcode.react';\nimport './barcode.css';\n\n\n\nfunction Barcode(props) {\n  return (\n    <div>\n\n      <div id=\"label\">\n        <div id=\"top\">\n            <p class=\"align-center price\">S/. {props.children.price}.00</p>\n            <p class=\"align-center points\">o {props.children.price / 0.04} Puntos</p>\n        </div>\n        <div id=\"bottom\">\n            <div id=\"left-bottom\">\n                <div>\n                    <p class=\"align-center desc\">{props.children.desc}</p>\n                </div>\n                <div id=\"left-bottom-size\">\n                    <p class=\"align-center\">T/. {props.children.size}</p>\n                </div>\n            </div>\n            <div id=\"right-bottom\">\n                <p class=\"align-center mcode\">{props.children.mCode}</p>\n                <p class=\"align-center code\">{props.children.code}</p>\n                <div id=\"qr-code\">\n                  <QRCode value={props.children.code} size={100}></QRCode>\n                </div>\n            </div>\n        </div>\n      </div>\n\n    </div>\n  );\n}\n\nexport default Barcode;\n","import React, { useState } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport CSVReader from 'react-csv-reader'\nimport Barcode from './barcode'\n\n\n\n\nfunction App() {\n\n\n  const [labels, setLabels] = useState([])\n\n  const getData = (data) => {\n    var barcodes = []\n\n    for (let i = 1; i < data.length; i++) {\n      const element = data[i];\n\n      var elementDetails = {\n        price : element[0],\n        desc : element[1],\n        size : element[2],\n        mCode : element[3],\n        code : element[4]\n      }\n      barcodes.push(elementDetails);\n\n    }\n\n    setLabels(prevLabels => barcodes)\n\n  };\n\n  return (\n    <div>\n      <CSVReader onFileLoaded={(data, _) => getData(data)} />\n      {labels.map(label => (\n        <Barcode>{label}</Barcode>\n      ))}\n    </div>\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}