{"version":3,"sources":["microQR.js","barcode.js","App.js","serviceWorker.js","index.js"],"names":["MicroQR","barcodeProps","bcid","this","props","codeType","text","value","scale","includetext","textxalign","bwipjs","toCanvas","id","e","canvasId","style","width","height","Component","Barcode","code","getPrice","price","Number","toFixed","formatedCode","label","type","className","Math","round","desc","size","mCode","level","renderAs","App","barcodes","useState","inputKey","setInputKey","labels","setLabels","length","quantity","setQuantity","filename","setFilename","key","inputId","onFileLoaded","data","fileInfo","i","j","element","elementDetails","push","prevQuantity","prevLabels","randomString","random","toString","prevInputKey","prevFilename","name","getData","onClick","window","print","map","index","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a56a05a5.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport bwipjs from \"bwip-js\";\n\nclass MicroQR extends Component {\n  componentDidMount() {\n    try {\n      // The return value is the canvas element\n\n      var barcodeProps = {\n        bcid: this.props.codeType, // Barcode type\n        text: this.props.value, // Text to encode\n        scale: this.props.scale, // 3x scaling factor\n        includetext: false, // Show human-readable text\n        textxalign: \"center\", // Always good to set this\n      };\n\n      let canvas = bwipjs.toCanvas(`${this.props.id}-canvas`, barcodeProps);\n      // console.log(canvas);\n    } catch (e) {\n      // `e` may be a string or Error object\n    }\n  }\n\n  render() {\n    let canvasStyle = {\n      width: '100%',\n      height: '100%'\n    };\n    let canvasId =`${this.props.id}-canvas`;\n    return <canvas id={canvasId} style={canvasStyle}></canvas>;\n  }\n}\n\nexport default MicroQR;\n","import React from \"react\";\nimport QRCode from \"qrcode.react\";\nimport MicroQR from \"./microQR\";\nimport \"./barcode.css\";\n\nfunction Barcode(props) {\n  const getPrice = (price) => {\n    if (typeof price !== \"undefined\") {\n      return Number(price).toFixed(2);\n    } else {\n      return \"\";\n    }\n  };\n\n  const getCode = (code) => {\n    if (typeof code !== \"undefined\") {\n      return code;\n    } else {\n      return \"no code\";\n    }\n  };\n\n  const formatedCode = getCode(props.label.code);\n\n  if (props.label.type === '1') {\n    return (\n      <div className=\"type-one\">\n        <div className=\"top\">\n          <div className=\"price\">S/. {getPrice(props.label.price)}</div>\n          <div className=\"points\">\n            o {Math.round(props.label.price / 0.04)} Puntos\n          </div>\n        </div>\n        <div className=\"left-bottom\">\n          <div className=\"desc\">{props.label.desc}</div>\n          <div className=\"size\">T/. {props.label.size}</div>\n        </div>\n        <div className=\"right-bottom\">\n          <div className=\"m-code\">{props.label.mCode}</div>\n          <div className=\"code\">{formatedCode}</div>\n          <div className=\"qr-code\">\n            <div className=\"qr\">\n              <QRCode\n                value={formatedCode}\n                size={120}\n                level={\"H\"}\n                renderAs={\"svg\"}\n              ></QRCode>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  } else if (props.label.type === '2') {\n    return (\n      <div className=\"type-two\">\n        <div>\n          <div className=\"price\">S/. {getPrice(props.label.price)}</div>\n          <div className=\"micro-qr\">\n            <div className=\"qr\">\n              <MicroQR\n                codeType={\"microqrcode\"}\n                value={props.label.code}\n                scale={5}\n                size={45.5}\n                id={`${props.id}-l`}\n              ></MicroQR>\n            </div>\n          </div>\n        </div>\n        <div>\n          <div className=\"price\">S/. {getPrice(props.label.price)}</div>\n          <div className=\"micro-qr\">\n            <div className=\"qr\">\n              <MicroQR\n                codeType={\"microqrcode\"}\n                value={props.label.code}\n                scale={5}\n                size={45.5}\n                id={`${props.id}-m`}\n              ></MicroQR>\n            </div>\n          </div>\n        </div>\n        <div>\n          <div className=\"price\">S/. {getPrice(props.label.price)}</div>\n          <div className=\"micro-qr\">\n            <div className=\"qr\">\n              <MicroQR\n                codeType={\"microqrcode\"}\n                value={props.label.code}\n                scale={5}\n                size={45.5}\n                id={`${props.id}-r`}\n              ></MicroQR>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  } else if (props.label.type === '3') {\n    return (\n      <div className=\"etiqueta-01\">\n      <h2 className=\"price\">S/. {getPrice(props.label.price)}</h2>\n      <p className=\"cat\">HOMBRE / POLO / PIONIER</p>\n      <p className=\"fa-code\">T96661</p>\n      <p className=\"desc\">{props.label.desc}</p>\n      <p className=\"attr\">CELESTE-M</p>\n      <div className=\"barcode\">\n      <MicroQR\n                codeType={\"code128\"}\n                value={props.label.code}\n                scale={5}\n                size={100}\n                id={`${props.id}-r`}\n              ></MicroQR>\n      </div>\n      <p className=\"code\">5.23523.ST</p>\n      </div>\n    );\n  }\n}\n\nexport default Barcode;\n","import React, { useState } from 'react';\nimport './App.css';\nimport CSVReader from 'react-csv-reader';\nimport Barcode from './barcode';\n\n\nfunction App() {\n  let barcodes = [];\n\n  // Debugging code\n  const debug = false;\n\n  const getDataDebug = (data) => {\n    for (let i = 0; i < data.length; i++) {\n      for (let j = 0; j < data[i]['total']; j++) {\n        var elementDetails = {\n          price : data[i]['price'],\n          desc : data[i]['desc'],\n          size : data[i]['size'],\n          mCode : data[i]['mCode'],\n          code : data[i]['code'],\n          type : data[i]['type']\n        }\n        barcodes.push(elementDetails);\n      }\n    }\n  };\n\n  if (debug) {\n    let data = require('./tickets.json');\n    getDataDebug(data);\n  }\n  // end\n\n  const [inputKey, setInputKey] = useState('22');\n\n  const [labels, setLabels] = useState(barcodes);\n  const [quantity, setQuantity] = useState(barcodes.length);\n\n  const [filename, setFilename] = useState('');\n\n\n  const getData = (data, fileInfo) => {\n    var barcodes = []\n\n    for (let i = 1; i < data.length; i++) {\n      for (let j = 0; j < Number(data[i][5]); j++) {\n\n        const element = data[i];\n\n        var elementDetails = {\n          price : element[0],\n          desc : element[1],\n          size : element[2],\n          mCode : element[3],\n          code : element[4],\n          type : element[6]\n        }\n        barcodes.push(elementDetails);\n\n      }\n    }\n\n    setQuantity(prevQuantity => barcodes.length);\n    setLabels(prevLabels => barcodes);\n\n    const randomString = Math.random().toString(36);\n    setInputKey(prevInputKey => randomString);\n\n    setFilename(prevFilename => fileInfo.name);\n\n  };\n\n  return (\n    <div>\n      <div key={inputKey} className=\"file-container\">\n        <CSVReader inputId=\"file-upload\" onFileLoaded={(data, fileInfo) => getData(data, fileInfo)} />\n        <div className=\"mask\">\n        {filename}\n        </div>\n      </div>\n\n      <div id=\"no-print\">\n      <button onClick={() => window.print()}>PRINT</button>\n      </div>\n\n      <h1>Etiquetas: {quantity}</h1>\n\n      <div id=\"section-to-print\">\n        {\n        labels.map((label, index) => (\n          <Barcode key={index} label={label} id={index}></Barcode>\n        ))}\n      </div>\n    </div>\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}